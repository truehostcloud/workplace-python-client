# coding: utf-8

"""
    Workplace Console API

    API for managing email and workplace service subscriptions.

    The version of the OpenAPI document: v1
    Contact: support@truehost.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OrderDisplay(BaseModel):
    """
    OrderDisplay
    """ # noqa: E501
    id: Optional[StrictInt] = None
    context_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    domain: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    enabled: Optional[StrictBool] = None
    synched_at: Optional[datetime] = None
    average_size: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    filestore_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    filestore_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    max_quota: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    context_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    used_quota: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    gab_mode: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    is_order_active: Optional[StrictBool] = None
    updated_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    unallocated_quota: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    unallocated_alias: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    is_alias_calculated: Optional[StrictBool] = None
    is_alias_synched: Optional[StrictBool] = None
    last_dns_check: Optional[datetime] = None
    is_dns_valid: Optional[StrictBool] = None
    client_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    is_verified: Optional[StrictBool] = None
    plan_id: Optional[StrictInt] = Field(default=None, alias="subscription")
    __properties: ClassVar[List[str]] = ["id", "context_id", "domain", "enabled", "synched_at", "average_size", "filestore_id", "filestore_name", "max_quota", "context_name", "used_quota", "gab_mode", "is_order_active", "updated_at", "created_at", "unallocated_quota", "unallocated_alias", "is_alias_calculated", "is_alias_synched", "last_dns_check", "is_dns_valid", "client_id", "is_verified", "subscription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDisplay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "updated_at",
            "created_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if context_id (nullable) is None
        # and model_fields_set contains the field
        if self.context_id is None and "context_id" in self.model_fields_set:
            _dict['context_id'] = None

        # set to None if synched_at (nullable) is None
        # and model_fields_set contains the field
        if self.synched_at is None and "synched_at" in self.model_fields_set:
            _dict['synched_at'] = None

        # set to None if filestore_name (nullable) is None
        # and model_fields_set contains the field
        if self.filestore_name is None and "filestore_name" in self.model_fields_set:
            _dict['filestore_name'] = None

        # set to None if context_name (nullable) is None
        # and model_fields_set contains the field
        if self.context_name is None and "context_name" in self.model_fields_set:
            _dict['context_name'] = None

        # set to None if gab_mode (nullable) is None
        # and model_fields_set contains the field
        if self.gab_mode is None and "gab_mode" in self.model_fields_set:
            _dict['gab_mode'] = None

        # set to None if last_dns_check (nullable) is None
        # and model_fields_set contains the field
        if self.last_dns_check is None and "last_dns_check" in self.model_fields_set:
            _dict['last_dns_check'] = None

        # set to None if client_id (nullable) is None
        # and model_fields_set contains the field
        if self.client_id is None and "client_id" in self.model_fields_set:
            _dict['client_id'] = None

        # set to None if plan_id (nullable) is None
        # and model_fields_set contains the field
        if self.plan_id is None and "plan_id" in self.model_fields_set:
            _dict['subscription'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDisplay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "context_id": obj.get("context_id"),
            "domain": obj.get("domain"),
            "enabled": obj.get("enabled"),
            "synched_at": obj.get("synched_at"),
            "average_size": obj.get("average_size"),
            "filestore_id": obj.get("filestore_id"),
            "filestore_name": obj.get("filestore_name"),
            "max_quota": obj.get("max_quota"),
            "context_name": obj.get("context_name"),
            "used_quota": obj.get("used_quota"),
            "gab_mode": obj.get("gab_mode"),
            "is_order_active": obj.get("is_order_active"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "unallocated_quota": obj.get("unallocated_quota"),
            "unallocated_alias": obj.get("unallocated_alias"),
            "is_alias_calculated": obj.get("is_alias_calculated"),
            "is_alias_synched": obj.get("is_alias_synched"),
            "last_dns_check": obj.get("last_dns_check"),
            "is_dns_valid": obj.get("is_dns_valid"),
            "client_id": obj.get("client_id"),
            "is_verified": obj.get("is_verified"),
            "subscription": obj.get("subscription")
        })
        return _obj


